{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { marked } from 'marked';\nconst STATUS = {\n  idle: 'IDLE',\n  input: 'INPUT',\n  parsing: 'PARSING'\n};\nconst initialText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`;\nconst editorSlice = createSlice({\n  name: 'editor',\n  initialState: {\n    html: initialText,\n    status: STATUS.idle,\n    parsedHTML: marked.parse(initialText)\n  },\n  reducers: {\n    setIdle: state => {\n      state.status = STATUS.idle;\n    },\n    setInitialState: state => {\n      state.status = STATUS.input;\n    },\n    startUserInput: (state, action) => {\n      state.status = STATUS.input;\n    },\n    setUserInput: (state, action) => {\n      state.status = STATUS.input;\n      state.html = action.payload;\n    },\n    completeUserInput: (state, action) => {\n      state.status = STATUS.parsing;\n      state.parsedHTML = document.getElementById('preview').innerHTML = marked.parse(state.html);\n    },\n    completeParsing: (state, action) => {\n      state.status = STATUS.idle;\n      state.parsedHTML += action.payload;\n    }\n  }\n});\nexport const {\n  setIdle,\n  setInitialState,\n  startUserInput,\n  setUserInput,\n  completeUserInput,\n  completeParsing\n} = editorSlice.actions;\nexport default editorSlice.reducer;","map":{"version":3,"names":["createSlice","marked","STATUS","idle","input","parsing","initialText","editorSlice","name","initialState","html","status","parsedHTML","parse","reducers","setIdle","state","setInitialState","startUserInput","action","setUserInput","payload","completeUserInput","document","getElementById","innerHTML","completeParsing","actions","reducer"],"sources":["C:/Users/plabr/source/repos/jholt1988.github.io/src/Store/editorSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\nimport { marked } from 'marked';\r\n\r\nconst STATUS= {\r\n     idle:'IDLE', \r\n    input: 'INPUT', \r\n    parsing:'PARSING'\r\n\r\n}\r\nconst initialText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`\r\n\r\nconst editorSlice =  createSlice({\r\n    name: 'editor',\r\n    initialState: {\r\n        html: initialText,\r\n        status: STATUS.idle,\r\n        parsedHTML : marked.parse(initialText)\r\n    }, \r\n    reducers:{\r\n        setIdle : state => {\r\n          state.status =  STATUS.idle\r\n                }, \r\n          setInitialState: (state) => {\r\n\r\n            state.status = STATUS.input\r\n          },\r\n\r\n        startUserInput: (state, action) => {\r\n            state.status = STATUS.input\r\n            \r\n        }, \r\n          setUserInput: (state, action) => {\r\n            state.status = STATUS.input \r\n            state.html = action.payload\r\n          }, \r\n          completeUserInput: (state, action) => {\r\n            state.status = STATUS.parsing\r\n            state.parsedHTML = document.getElementById('preview').innerHTML= marked.parse(state.html)\r\n          }, \r\n          completeParsing: (state, action) => {\r\n            state.status = STATUS.idle\r\n          \r\n            state.parsedHTML += action.payload\r\n          }\r\n           \r\n    }\r\n\r\n})\r\n\r\nexport const {setIdle, setInitialState, startUserInput, setUserInput, completeUserInput, completeParsing} =  editorSlice.actions\r\n\r\nexport default editorSlice.reducer\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,SAASC,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,MAAM,GAAE;EACTC,IAAI,EAAC,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAC;AAEZ,CAAC;AACD,MAAMC,WAAW,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG;AAElG,MAAMC,WAAW,GAAIP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACVC,IAAI,EAAEJ,WAAW;IACjBK,MAAM,EAAET,MAAM,CAACC,IAAI;IACnBS,UAAU,EAAGX,MAAM,CAACY,KAAK,CAACP,WAAW;EACzC,CAAC;EACDQ,QAAQ,EAAC;IACLC,OAAO,EAAGC,KAAK,IAAI;MACjBA,KAAK,CAACL,MAAM,GAAIT,MAAM,CAACC,IAAI;IACrB,CAAC;IACPc,eAAe,EAAGD,KAAK,IAAK;MAE1BA,KAAK,CAACL,MAAM,GAAGT,MAAM,CAACE,KAAK;IAC7B,CAAC;IAEHc,cAAc,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC/BH,KAAK,CAACL,MAAM,GAAGT,MAAM,CAACE,KAAK;IAE/B,CAAC;IACCgB,YAAY,EAAEA,CAACJ,KAAK,EAAEG,MAAM,KAAK;MAC/BH,KAAK,CAACL,MAAM,GAAGT,MAAM,CAACE,KAAK;MAC3BY,KAAK,CAACN,IAAI,GAAGS,MAAM,CAACE,OAAO;IAC7B,CAAC;IACDC,iBAAiB,EAAEA,CAACN,KAAK,EAAEG,MAAM,KAAK;MACpCH,KAAK,CAACL,MAAM,GAAGT,MAAM,CAACG,OAAO;MAC7BW,KAAK,CAACJ,UAAU,GAAGW,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,SAAS,GAAExB,MAAM,CAACY,KAAK,CAACG,KAAK,CAACN,IAAI,CAAC;IAC3F,CAAC;IACDgB,eAAe,EAAEA,CAACV,KAAK,EAAEG,MAAM,KAAK;MAClCH,KAAK,CAACL,MAAM,GAAGT,MAAM,CAACC,IAAI;MAE1Ba,KAAK,CAACJ,UAAU,IAAIO,MAAM,CAACE,OAAO;IACpC;EAEN;AAEJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACN,OAAO;EAAEE,eAAe;EAAEC,cAAc;EAAEE,YAAY;EAAEE,iBAAiB;EAAEI;AAAe,CAAC,GAAInB,WAAW,CAACoB,OAAO;AAEhI,eAAepB,WAAW,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}